---
- name: Control the files deleting process
  hosts: localhost
  connection: local
  gather_facts: False
  vars:
    NB_FILES_TO_KEEP: 3
    DELETE_FILES: false
    FILE_EXT: "***not defined***"
  tasks:

  - name: "Find all files with the extension : {{ FILE_EXT }}"
    find:
      # Files path
      path: "{{ MY_PATH }}"
      patterns: "*{{ FILE_EXT }}"
    # Assign the list of files in a variable
    register: FILES_LIST
    # Execute the task if both variables are defined
    when: FILE_EXT != '***not defined***' and MY_PATH is defined

  - name: No files present in the directory
    fail:
      msg:
      - "No files with the desired extension were found in the directory {{ MY_PATH }}"
      - "This error can occur if FILE_EXT was not correctly defined (value: {{ FILE_EXT }})"
    # Execute if one of both variables is undefined
    when: FILES_LIST is skipped or (FILES_LIST.files | length) == 0

  - name: Gather files for deletion
    vars:
      # List of files from the oldest to the newest
      SORTED_LIST: "{{ FILES_LIST.files | sort(attribute='ctime') | map(attribute='path') | list }}"
      # Number of files in SORTED_LIST
      FILES_TO_DELETE: "{{ SORTED_LIST[:0-(NB_FILES_TO_KEEP | int)] }}"
    debug:
      # Display an element of the list
      msg: "{{ item }}"
    # Remove the X->[NB_FILES_TO_KEEP] newest files from the list
    with_items: "{{ FILES_TO_DELETE }}"
    register: GATHER_FILES
    # Execute the task if the list exist
    # and if the total number of files is bigger than the number of files we want to keep
    when: (SORTED_LIST | length | int) > (NB_FILES_TO_KEEP | int)
    ignore_errors: true

  - name: Delete files
    file:
      path: "{{ item.item }}"
      state: absent
    with_items: "{{ GATHER_FILES.results }}"
    # Execute the task if DELETE_FILES is TRUE (FALSE by default)
    # and if the task 'Gather files for deletion' didn't fail
    when: (DELETE_FILES | bool) and GATHER_FILES is succeeded

  - name: How to activate the suppression process
    debug:
      msg:
      - "Assign 'True' to the DELETE_FILES variable"
      - "Add the ad-hoc command '-e DELETE_FILES=True' to the CLI"
    # Execute if one of both variables is undefined
    when: not DELETE_FILES
